stages:
  - "Deploy"
  - "Kiali"

variables:
  DOCKER_ARTIFACTORY_REPO: 172.16.24.68:8082
  EAPORTAL_SERVICE_NAME: eaportal-service
  EAPORTAL_SERVICE_DOMAIN: $EAPORTAL_SERVICE_NAME.svc.cluster.local
  DATA_ACCESS_SERVICE_NAME: data-access-service
  DATA_ACCESS_SERVICE_DOMAIN: $DATA_ACCESS_SERVICE_NAME.$EAPORTAL_SERVICE_DOMAIN

Deploy:
  image:  varunshkumar/dind-k8s:v2
  stage: "Deploy"
  script:
    - export KUBECONFIG=kubeconfig.yml
    - kubectl cluster-info
    - kubectl get nodes
    - kubectl get services
    - kubectl get deployment data-access-service --template={{.status.readyReplicas}} -n eaportal-service

    # Deploy Kiali
    #- kubectl apply -f ${ISTIO_HOME}/samples/addons/kiali.yaml
    #- helm install --namespace istio-system --set auth.strategy="anonymous" --repo https://kiali.org/helm-charts kiali-server kiali-server

    # Set Kiali as NodePort
    - kubectl patch svc kiali -n istio-system -p '{"spec":{"type":"NodePort"}}'
    - kubectl describe services kiali -n istio-system


    # Set Prometheus as NodePort
    - kubectl patch svc prometheus -n istio-system -p '{"spec":{"type":"NodePort"}}'
    - kubectl describe services prometheus -n istio-system

    # Get all services
    - kubectl get services

    # Check Ingress Gateway
    - kubectl get svc istio-ingressgateway -n istio-system
    - export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
    - export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
    - export TCP_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="tcp")].nodePort}')
    - export INGRESS_HOST=$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath='{.items[0].status.hostIP}')
    - export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT
    - echo $GATEWAY_URL

    # Create Create a root certificate and private key to sign the certificates for your services
    - openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout $EAPORTAL_SERVICE_DOMAIN.key -out $EAPORTAL_SERVICE_DOMAIN.crt -subj '/CN=$EAPORTAL_SERVICE_DOMAIN/O=$EAPORTAL_SERVICE_NAME'

    # Create a certificate and a private key for data-access-service.eaportal-service.svc.cluster.local:
    - openssl req -out $DATA_ACCESS_SERVICE_DOMAIN.csr -newkey rsa:2048 -nodes -keyout $DATA_ACCESS_SERVICE_DOMAIN.key -subj "/CN=$DATA_ACCESS_SERVICE_DOMAIN/O=$DATA_ACCESS_SERVICE_NAME"
    - openssl x509 -req -days 365 -CA $EAPORTAL_SERVICE_DOMAIN.crt -CAkey $EAPORTAL_SERVICE_DOMAIN.key -set_serial 0 -in $DATA_ACCESS_SERVICE_DOMAIN.csr -out $DATA_ACCESS_SERVICE_DOMAIN.crt

    - kubectl create -n istio-system secret tls $DATA_ACCESS_SERVICE_NAME-credential --key=$DATA_ACCESS_SERVICE_DOMAIN.key --cert=$DATA_ACCESS_SERVICE_DOMAIN.crt || exit 0
    - kubectl apply -f eaportal-service/gateway.yml